<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Sorter" Id="{efb4f521-b93c-401a-8a07-5bbe9c018238}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Sorter
VAR
	nSorterClearIdx				: DINT;
	bSimulate					: BOOL := FALSE;	// Indicates when runing a simulation
	
	st_ToInduct					: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_Inducting				: ST_ItemTemporary;	// This is the next item to be inducted onto the sorter
	st_InductUpdate				: ST_ItemTemporary;	// This is to update an item already being inducted
	{attribute 'OPC.UA.DA' := '1'}
	st_Sorter					: ST_Sorter;
	{attribute 'OPC.UA.DA' := '1'}
	aSorterDiverts 				: ARRAY[DIVERTMIN..NUMBEROFDIVERTS] OF ST_Divert;

	st_SorterEncoder 			: ST_Encoder;
	fb_SorterEncoder 			: FB_ProcessEncoder;


	tEncoderOK			: TON;
	nLastEncoderCount	: UDINT;

	{attribute 'OPC.UA.DA' := '1'}
	fb_SortMetrics				: FB_Metrics;

	In_DefaultDestination AT %I*	: DINT;	// Input default destination update from Host messaging(MsgControl.RECEIVE)

	fb_CommissionSorterDiverts	: FB_DivertCommission;
	rInductPE					: R_TRIG; 	// Capture the Rising edge of the Induct PE
	fInductPE					: F_TRIG; 	// Capture the Falling edge of the Induct PE

	rDischargePE				: R_TRIG; 	// Capture the Rising edge of the Discharge PE
	fDischargePE				: F_TRIG; 	// Capture the Falling edge of the Discharge PE

	st_TempItem					: ST_ItemTemporary;	// Store temporary Item info until BCR data is received

	DivertToCommission			: UINT := 0;	// Non-zero value will send all items to this divert

	sMessage			: STRING;

	ClearSorterArray	: BOOL;

	FB_DivertLog		: FB_DivertLog;
	FB_SorterLog		: FB_SorterLog;
	
	SorterDischargeItem	: ST_Item;
	
END_VAR

VAR PERSISTENT
	aSorterItems 				: ARRAY[SORTERENCODERMIN..SORTERENCODERMAX] OF ST_Item;	// Persist the Items to Sort array
	{attribute 'OPC.UA.DA' := '1'}
	st_SorterCfg				: ST_SorterConfig; 	// Persist Sorter configuration
	{attribute 'OPC.UA.DA' := '1'}
	aSorterDivertsCfgs 			: ARRAY[DIVERTMIN..NUMBEROFDIVERTS] OF ST_DivertCfg; 	// Persist Sorter Configuration
END_VAR

VAR CONSTANT
	SORTERMASKSIZE				: UINT := 12;		// Number of bits to mask into the Encoder Count, will define the size of the SORTERENCODERMAX value
	{attribute 'OPC.UA.DA' := '1'}
	NUMBEROFDIVERTS				: DINT := 5;
	DIVERTMIN					: DINT := 1;
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMAX			: UDINT := ((LREAL_TO_UDINT(EXPT(2,SORTERMASKSIZE)))-1); // Calculated size based on the bitmask 
	{attribute 'OPC.UA.DA' := '1'}
	SORTERENCODERMIN			: UDINT := 0;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Sorter clear when the system is restarted or downloaded (INIT=TRUE for first scan)
IF (GVL_IO.INIT AND NOT st_SorterCfg.RetainOnRestart) OR ClearSorterArray THEN
	FOR nSorterClearIdx := UDINT_TO_DINT(SORTERENCODERMIN) TO UDINT_TO_DINT(SORTERENCODERMAX) BY 1 DO
		IF nSorterLogEnable.SORTER_DUMP THEN
			IF aSorterItems[nSorterClearIdx].ID <> '' THEN
				IF .nSorterLogEnable.SORTER_DUMP THEN
					sMessage := CONCAT(' Item: ', aSorterItems[nSorterClearIdx].ID);
					sMessage := CONCAT(sMessage,' Index: ');
					sMessage := CONCAT(sMessage, DINT_TO_STRING(nSorterClearIdx));
					// Write to the Error List
					ADSLOGSTR( msgCtrlMask := ADSLOG_MSGTYPE_HINT OR ADSLOG_MSGTYPE_LOG
						, msgFmtStr := 'Array Dump Info: %s'
						, strArg := sMessage);
				END_IF
			END_IF
		END_IF
		aSorterItems[nSorterClearIdx] := BlankItem;
	END_FOR
	ClearSorterArray := FALSE;
END_IF

// Setup and process the Sorter Encoder
st_SorterEncoder.EncoderRawCount := GVL_IO.ENC_9021_Raw;
st_SorterEncoder.BitMaskSize := SORTERMASKSIZE;
fb_SorterEncoder(Encoder := st_SorterEncoder, Simulate := bSimulate);

(*
	Initializes the Diverts.  
*)
//Divert #1
aSorterDiverts[1].Config := aSorterDivertsCfgs[1];
aSorterDiverts[1].ConfirmPE := Photoeyes.PE_7191.Out; 			
aSorterDiverts[1].FullPE := Photoeyes.PE_7191.Out;   			

//Divert #2
aSorterDiverts[2].Config := aSorterDivertsCfgs[2];
aSorterDiverts[2].ConfirmPE := Photoeyes.PE_7241.Out; 		
aSorterDiverts[2].FullPE := Photoeyes.PE_7241.Out;   		

//Divert #3 
aSorterDiverts[3].Config := aSorterDivertsCfgs[3];
aSorterDiverts[3].ConfirmPE := Photoeyes.PE_8171.Out; 		
aSorterDiverts[3].FullPE := Photoeyes.PE_8171.Out;   	

//Divert #4 
aSorterDiverts[4].Config := aSorterDivertsCfgs[4];
aSorterDiverts[4].ConfirmPE := Photoeyes.PE_8221.Out; 		
aSorterDiverts[4].FullPE := Photoeyes.PE_8221.Out; 

//Divert #5
aSorterDiverts[5].Config := aSorterDivertsCfgs[5];
aSorterDiverts[5].ConfirmPE := Photoeyes.PE_8211.Out; 		
aSorterDiverts[5].FullPE := Photoeyes.PE_8211.Out; 	


fb_CommissionSorterDiverts(
			InductTrigger := Photoeyes.PE_7171.Out,
			ReferenceValue := st_SorterEncoder.CurrentCount, 
			DischargeTrigger := Photoeyes.PE_8211.Out,
			TestTime := T#10S, Diverts := aSorterDiverts);

// Provide a "hard-coded" default destination.
IF st_SorterCfg.DefaultDestination <= 0 THEN
	st_SorterCfg.DefaultDestination := 5;
END_IF						

// Name of the sorter equipment
st_SorterCfg.Name := Conveyors.cfgP6040Label;
st_SorterCfg.DivertCount := NUMBEROFDIVERTS;
IF DivertToCommission > 0 THEN
	st_SorterCfg.DefaultDestination := DivertToCommission;
END_IF
st_Sorter.EncoderCounts := st_SorterEncoder.CurrentCount;
st_Sorter.InductPE := PhotoEyes.PE_7171.Out;
st_Sorter.DischargePE := Photoeyes.PE_8211.Out;

// Test the Encoder
tEncoderOK.IN := (Conveyors.P6040_Status.Sts_IsRunning AND (st_Sorter.EncoderCounts = nLastEncoderCount));
nLastEncoderCount := st_Sorter.EncoderCounts;
tEncoderOK(PT:=T#1S);

// OK when Q is not on, but the alarm is reversed
  GVL_IO.ENC_9021_OK := tEncoderOK.Q;

// Publish the sorter name
  GVL_IO.SorterName := st_SorterCfg.Name;

  
  IF GVL_SorterItems.P6040_DefaultDestination <> st_SorterCfg.DefaultDestination THEN
	   st_SorterCfg.DefaultDestination := GVL_SorterItems.P6040_DefaultDestination; 
  END_IF
  
  
// Sorter
(*
	ProcessBuffers processes all associated buffers (Sorter/Divert/Arrival/Transport/Update)
	Items arriving at the sorter are detected and processed in this function block then deliverd to the SorterProgram
	Items inducted into sorter produce TransportResponse messages in this function block
	Items diverted off the sorter produce TransportComplete messages in this function block
*)
ProcessBuffers(st_NextToInduct := st_ToInduct
				, st_TempInductItem := st_TempItem
				, st_UpdateItem := st_Inducting
				, st_Sorter := st_Sorter
				, aDiverts := aSorterDiverts
				, aItems := aSorterItems
				, DivertToCommission := DivertToCommission
				, ItemsArrayMax := SORTERENCODERMAX
				, ItemsArrayMin := SORTERENCODERMIN
				,DefaultDestIdx => st_SorterCfg.DefaultDestIdx
				,RecircDestIdx => st_SorterCfg.RecircDestIdx);

// Sorter log logs induct/discharge PE's and prepares the Temporory Record for unidentified items
FB_SorterLog(
				SorterToLog := st_Sorter,
				SorterLogEnable := .nSorterLogEnable,
				ToInduct := st_ToInduct,
				TempItem => st_TempItem);

				
				
				
				
				
(*
	SorterProgram is a separate Program
	Config portion of the st_sorter is separate to allow it be be persistent.
*)
st_sorter.Config := st_sorterCfg;
Sorter_P6040(st_Sorter := st_Sorter
		, In_ItemToInduct := st_ToInduct.Item
		, In_InductingItem := st_Inducting.Item
		, aItems := aSorterItems
		, aDiverts := aSorterDiverts
		, st_tempItem := st_TempItem
		, ItemsArrayMax := SORTERENCODERMAX
		, ItemsArrayMin := SORTERENCODERMIN
		, DivertArrayMax := NUMBEROFDIVERTS
		, DivertArrayMin := DIVERTMIN
		, st_DischargeItem => SorterDischargeItem); 
//--------------------------------------Divert Config------------------------------------------
(*
	Initialize Diverts here. 
	Tie variables commented IO to physical IO address
*)

// LOG the diverts
FB_DivertLog(DivertArray := aSorterDiverts,
				DivertLogEnable := .nDivertLogEnable,
				EncoderCounts := st_SorterEncoder.CurrentCount);
]]></ST>
    </Implementation>
    <LineIds Name="Sorter">
      <LineId Id="61" Count="18" />
      <LineId Id="5" Count="0" />
      <LineId Id="100" Count="4" />
      <LineId Id="111" Count="0" />
      <LineId Id="600" Count="2" />
      <LineId Id="604" Count="24" />
      <LineId Id="603" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="125" Count="3" />
      <LineId Id="130" Count="12" />
      <LineId Id="710" Count="0" />
      <LineId Id="143" Count="6" />
      <LineId Id="849" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="850" Count="0" />
      <LineId Id="853" Count="1" />
      <LineId Id="851" Count="1" />
      <LineId Id="151" Count="12" />
      <LineId Id="594" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="776" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="629" Count="5" />
      <LineId Id="843" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="844" Count="3" />
      <LineId Id="218" Count="9" />
      <LineId Id="636" Count="4" />
      <LineId Id="228" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="373" Count="4" />
      <LineId Id="641" Count="3" />
      <LineId Id="99" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>